{"ast":null,"code":"var _jsxFileName = \"/Users/mayankpal/Desktop/Projects/In progress/rule-engine-ast/frontend/src/components/RuleList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { List, ListItem, ListItemText, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RuleList = () => {\n  _s();\n  const [rules, setRules] = useState([]);\n  useEffect(() => {\n    // Fetch rules from the API when the component is mounted\n    const fetchRules = async () => {\n      try {\n        const res = await axios.get('/api/rules');\n        setRules(res.data); // Update state with fetched rules\n      } catch (error) {\n        console.error('Error fetching rules', error);\n      }\n    };\n    fetchRules();\n  }, []);\n\n  // Helper function to build the condition string\n  const buildConditionString = root => {\n    if (root.type === 'operator') {\n      // If it's an operator (AND/OR), recursively get the left and right conditions\n      const leftCondition = root.left.condition || buildConditionString(root.left);\n      const rightCondition = root.right.condition || buildConditionString(root.right);\n      return `(${leftCondition} ${root.operator} ${rightCondition})`;\n    }\n    // If it's an operand, return the condition directly\n    return root.condition;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rule-list\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Existing Rules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), rules.length ? /*#__PURE__*/_jsxDEV(List, {\n      children: rules.map(rule => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: `${rule.name} (ID: ${rule._id})` // Display Rule Name and Rule ID\n          ,\n          secondary: buildConditionString(rule.root) || 'Complex Rule' // Use helper to build condition string\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this)\n      }, rule._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"No rules available. Create one!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(RuleList, \"sTtk373PZ75lT1TKxmJpkKbdr00=\");\n_c = RuleList;\nexport default RuleList;\nvar _c;\n$RefreshReg$(_c, \"RuleList\");","map":{"version":3,"names":["React","useState","useEffect","axios","List","ListItem","ListItemText","Typography","jsxDEV","_jsxDEV","RuleList","_s","rules","setRules","fetchRules","res","get","data","error","console","buildConditionString","root","type","leftCondition","left","condition","rightCondition","right","operator","className","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","length","map","rule","primary","name","_id","secondary","_c","$RefreshReg$"],"sources":["/Users/mayankpal/Desktop/Projects/In progress/rule-engine-ast/frontend/src/components/RuleList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { List, ListItem, ListItemText, Typography } from '@mui/material';\n\nconst RuleList = () => {\n    const [rules, setRules] = useState([]);\n\n    useEffect(() => {\n        // Fetch rules from the API when the component is mounted\n        const fetchRules = async () => {\n            try {\n                const res = await axios.get('/api/rules');\n                setRules(res.data);  // Update state with fetched rules\n            } catch (error) {\n                console.error('Error fetching rules', error);\n            }\n        };\n        fetchRules();\n    }, []);\n\n    // Helper function to build the condition string\n    const buildConditionString = (root) => {\n        if (root.type === 'operator') {\n            // If it's an operator (AND/OR), recursively get the left and right conditions\n            const leftCondition = root.left.condition || buildConditionString(root.left);\n            const rightCondition = root.right.condition || buildConditionString(root.right);\n            return `(${leftCondition} ${root.operator} ${rightCondition})`;\n        }\n        // If it's an operand, return the condition directly\n        return root.condition;\n    };\n\n    return (\n        <div className=\"rule-list\">\n            <Typography variant=\"h4\" gutterBottom>\n                Existing Rules\n            </Typography>\n            {rules.length ? (\n                <List>\n                    {rules.map((rule) => (\n                        <ListItem key={rule._id}>\n                            <ListItemText\n                                primary={`${rule.name} (ID: ${rule._id})`}  // Display Rule Name and Rule ID\n                                secondary={buildConditionString(rule.root) || 'Complex Rule'}  // Use helper to build condition string\n                            />\n                        </ListItem>\n                    ))}\n                </List>\n            ) : (\n                <Typography>No rules available. Create one!</Typography>\n            )}\n        </div>\n    );\n};\n\nexport default RuleList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,YAAY,CAAC;QACzCH,QAAQ,CAACE,GAAG,CAACE,IAAI,CAAC,CAAC,CAAE;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IACDJ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,oBAAoB,GAAIC,IAAI,IAAK;IACnC,IAAIA,IAAI,CAACC,IAAI,KAAK,UAAU,EAAE;MAC1B;MACA,MAAMC,aAAa,GAAGF,IAAI,CAACG,IAAI,CAACC,SAAS,IAAIL,oBAAoB,CAACC,IAAI,CAACG,IAAI,CAAC;MAC5E,MAAME,cAAc,GAAGL,IAAI,CAACM,KAAK,CAACF,SAAS,IAAIL,oBAAoB,CAACC,IAAI,CAACM,KAAK,CAAC;MAC/E,OAAO,IAAIJ,aAAa,IAAIF,IAAI,CAACO,QAAQ,IAAIF,cAAc,GAAG;IAClE;IACA;IACA,OAAOL,IAAI,CAACI,SAAS;EACzB,CAAC;EAED,oBACIhB,OAAA;IAAKoB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBrB,OAAA,CAACF,UAAU;MAACwB,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAEtC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,EACZxB,KAAK,CAACyB,MAAM,gBACT5B,OAAA,CAACL,IAAI;MAAA0B,QAAA,EACAlB,KAAK,CAAC0B,GAAG,CAAEC,IAAI,iBACZ9B,OAAA,CAACJ,QAAQ;QAAAyB,QAAA,eACLrB,OAAA,CAACH,YAAY;UACTkC,OAAO,EAAE,GAAGD,IAAI,CAACE,IAAI,SAASF,IAAI,CAACG,GAAG,GAAI,CAAE;UAAA;UAC5CC,SAAS,EAAEvB,oBAAoB,CAACmB,IAAI,CAAClB,IAAI,CAAC,IAAI,cAAe,CAAE;QAAA;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClE;MAAC,GAJSG,IAAI,CAACG,GAAG;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKb,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAEP3B,OAAA,CAACF,UAAU;MAAAuB,QAAA,EAAC;IAA+B;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAC1D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACzB,EAAA,CAjDID,QAAQ;AAAAkC,EAAA,GAARlC,QAAQ;AAmDd,eAAeA,QAAQ;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}